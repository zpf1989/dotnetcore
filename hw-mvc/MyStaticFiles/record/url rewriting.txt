URL rewriting creates an abstraction between resource locations and their addresses so that the locations and addresses are not tightly linked
Scenarios：
    Moving or replacing server resources temporarily or permanently while maintaining stable locators for those resources
    Splitting request processing across different applications or across areas of one application
    Removing, adding, or reorganizing URL segments on incoming requests
    Optimizing public URLs for Search Engine Optimization (SEO)c
    Permitting the use of friendly public URLs to help people predict the content they will find by following a link
    Redirecting insecure requests to secure endpoints
    Preventing image hotlinking

Ways：
     Apache mod_rewrite module
     IIS Rewrite Module
     URL rewriting on Nginx
     Your own method and class rule logic
     URL Rewriting Middleware in ASP.NET Core applications

URL rewriting can reduce the performance of an application. 
    Where feasible, you should limit the number and complexity of rules.

URL redirect：
     client-side operation
     This requires a round-trip to the server, and the redirect URL returned to the client 
        will appear in the browser's address bar when the client makes a new request for the resource
    When redirecting requests to a different URL, you will indicate whether the redirect is permanent or temporary
        301 (Moved Permanently)： The client will cache the response when a 301 status code is received.
        302 (Found)：client should not store and reuse the redirect URL in the future
URL redirect：
    server-side operation
    It doesn't require a round-trip to the server.
        The rewritten URL is not returned to the client and won't appear in a browser's address bar

When to use URL Rewriting Middleware：
    When you are unable to use the URL Rewrite module in IIS on Windows Server, 
        the Apache mod_rewrite module on Apache Server, 
        URL rewriting on Nginx, 
        or your application is hosted on WebListener server.
    The main reasons to use the server-based URL rewriting technologies in IIS, Apache, or Nginx are that 
        the middleware doesn't support the full features of these modules 
        and the performance of the middleware probably won't match that of the modules

Package：
    Microsoft.AspNetCore.Rewrite 

URL rewrite：
    new RewriteOptions()
    .AddRewrite(@"^rewrite-rule/(\d+)/(\d+)", "rewritten?var1=$1&var2=$2", skipRemainingRules: true)
    //重写，skipRemainingRules为true，则当前匹配时，忽略后续重写规则
    skipRemainingRules: true should be used whenever possible, 
        because matching rules is an expensive process and slows down application response time.

Apache mod_rewrite：
    new RewriteOptions()
    .AddApacheModRewrite(env.ContentRootFileProvider, "ApacheModRewrite.txt")//file must exists

IIS URL Rewrite Module rules：
    new RewriteOptions()
    .AddIISUrlRewrite(env.ContentRootFileProvider, "IISUrlRewrite.xml")//file must exists
    Don't point this at your web.config file, 
        as these rules should be stored outside of your web.config to avoid conflicts with the IIS Rewrite module


Method-based rule：
    new RewriteOptions()
    .Add(RedirectXMLRequests)
    static void RedirectXMLRequests(RewriteContext context)
    context：
        HttpContext
        Result：
            RuleResult.ContinueRules（default）
            RuleResult.EndResponse
            RuleResult.SkipRemainingRules //Stop applying rules and send the context to the next middleware
IRule-based rule：
    Use Add(IRule) to implement your own rule logic in a class that derives from IRule
    
    new RewriteOptions()
    .Add(new RedirectImageRequests(".png", "/png-images"))

Regex examples：
    Goal 	                            Regex String & Match Example 	Replacement String & Output Example
    Rewrite path into querystring 	    ^path/(.*)/(.*)                 path?var1=$1&var2=$2
                                        /path/abc/123 	                /path?var1=abc&var2=123
    Strip trailing slash 	            (.*)/$                          $1
                                        /path/ 	                        /path                
    Enforce trailing slash 	            (.*[^/])$                       $1/
                                        /path                           /path/	
    Avoid rewriting specific requests 	(.*[^(\.axd)])$                 rewritten/$1
                                        Yes: /resource.htm              /rewritten/resource.htm
                                        No: /resource.axd 	            /resource.axd
    Rearrange URL segments 	            path/(.*)/(.*)/(.*)             path/$3/$2/$1
                                        path/1/2/3 	                    path/3/2/1
    
    Replace a URL segment 	            ^(.*)/segment2/(.*)             $1/replaced/$2
                                        /segment1/segment2/segment3     /segment1/replaced/segment3 	
    